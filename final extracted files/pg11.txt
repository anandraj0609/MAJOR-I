Chapter 1 - A Tutorial Introduction
       
The quantities LOWER, UPPER and STEP are symbolic constants, not variables, so they do not appear in 
declarations. Symbolic constant names are conventionally written in upper case so they can ber readily 
distinguished from lower case variable names. Notice that there is no semicolon at the end of a #define line. 
1.5 Character Input and Output
We are going to consider a family of related programs for processing character data. You will find that many 
programs are just expanded versions of the prototypes that we discuss here. 
The model of input and output supported by the standard library is very simple. Text input or output, regardless of 
where it originates or where it goes to, is dealt with as streams of characters. A text stream is a sequence of characters divided into lines; each line consists of zero or more characters followed by a newline character. It is the responsibility of the library to make each input or output stream confirm this model; the C programmer using the library need not worry about how lines are represented outside the program. 
The standard library provides several functions for reading or writing one character at a time, of which getchar 
and putchar are the simplest. Each time it is called, getchar reads the next input character from a text stream 
and returns that as its value. That is, after 
the variable c contains the next character of input. The characters normally come from the keyboard; input from 
files is discussed in 

Chapter 7. 
The function putchar prints a character each time it is called: 

prints the contents of the integer variable c as a character, usually on the screen. Calls to putchar and printf 
may be interleaved; the output will appear in the order in which the calls are made. 
1.5.1 File Copying
Given getchar and putchar, you can write a surprising amount of useful code without knowing anything more about input and output. The simplest example is a program that copies its input to its output one character at a time: 
read a character
