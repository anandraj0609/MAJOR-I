Chapter 1 - A Tutorial Introduction
This works only if '0', '1', ..., '9' have consecutive increasing values. Fortunately, this is true for all character sets. 
By definition, chars are just small integers, so char variables and constants are identical to ints in arithmetic expressions. 
This is natural and convenient; for example c-'0' is an integer expression with a value between 0 and 9 corresponding to the character '0' to '9' stored in c, and thus a valid subscript for the array ndigit. 
The decision as to whether a character is a digit, white space, or something else is made with the sequence 
   if (c >= '0' && c <= '9')
       ++ndigit[c-'0'];   else if (c == ' ' || c == '\n' || c == '\t')       ++nwhite;   else       ++nother;
The pattern 
   if (condition1)
       statement1
   else if (condition2)
       statement2
       ...
       ...   
   else       
      statement n
occurs frequently in programs as a way to express a multi-way decision. 
The conditions are evaluated in order from the top until some condition is satisfied; at that point the corresponding statement part is executed, and the entire construction is finished. (Any statement can be several statements enclosed in braces.) 
If none of the conditions is satisfied, the statement after the final else is executed if it is present. 
If the final else and statement are omitted, as in the word count program, no action takes place. 
There can be any number of 
else if(condition)
  statement 
groups between the initial if and the final else. 
As a matter of style, it is advisable to format this construction as we have shown; if each if were indented past the previous else, a long sequence of decisions would march off the right side of the page. 
The switch statement, to be discussed in Chapter 4, provides another way to write a multi-way branch that is particulary suitable when the condition is whether some integer or character expression matches one of a set of constants. 
For contrast, we will present a switch version of this program in Section 3.4. 
