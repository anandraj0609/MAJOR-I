Chapter 1 - A Tutorial Introduction
mark the end of the string of characters. 
This conversion is also used by the C language: when a string constant like 
   "hello\n"
appears in a C program, it is stored as an array of characters containing the characters in the string and terminated with a '\0' to mark the end. 
 The %s format specification in printf expects the corresponding argument to be a string represented in this form.
copy also relies on the fact that its input argument is terminated with a '\0', and copies this character into the output. 
It is worth mentioning in passing that even a program as small as this one presents some sticky design problems. 
For example, what should main do if it encounters a line which is bigger than its limit? getline works safely, in that it stops collecting when the array is full, even if no newline has been seen. 
By testing the length and the last character returned, main can determine whether the line was too long, and then cope as it wishes. 
In the interests of brevity, we have ignored this issue. 
There is no way for a user of getline to know in advance how long an input line might be, so getline checks for overflow. 
On the other hand, the user of copy already knows (or can find out) how big the strings are, so we have chosen not to add error checking to it. 
Exercise 1-16. Revise the main routine of the longest-line program so it will correctly print the length of arbitrary long input lines, and as much as possible of the text. 
Exercise 1-17. Write a program to print all input lines that are longer than 80 characters. Exercise 1-18. Write a program to remove trailing blanks and tabs from each line of input, and to delete entirely blank lines. 
Exercise 1-19. Write a function reverse(s) that reverses the character string s. Use it to write a program that reverses its input a line at a time. 
1.10 External Variables and Scope
The variables in main, such as line, longest, etc., are private or local to main. 
Because they are declared within main, no other function can have direct access to them. 
The same is true of the variables in other functions; for example, the variable i in getline is unrelated to the i in copy.
Each local variable in a function comes into existence only when the function is called, and disappears when the function is exited. 
This is why such variables are usually known as automatic variables, following terminology in other languages.
We will use the term 
