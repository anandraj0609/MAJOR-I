Chapter 1 - A Tutorial Introduction
Since the specialized versions of getline and copy have no arguments, logic would suggest that their 
prototypes at the beginning of the file should be getline() and copy(). But for compatibility with older C 
programs the standard takes an empty list as an old-style declaration, and turns off all argument list checking; the 
word void must be used for an explicitly empty list. We will discuss this further in Chapter 4. 
You should note that we are using the words definition and declaration carefully when we refer to external 
variables in this section.``Definition'' refers to the place where the variable is created or assigned storage; ``declaration'' refers to places where the nature of the variable is stated but no storage is allocated. 
By the way, there is a tendency to make everything in sight an extern variable because it appears to simplify 
communications - argument lists are short and variables are always there when you want them. But external variables are always there even when you don't want them. Relying too heavily on external variables is fraught with peril since it leads to programs whose data connections are not all obvious - variables can be changed in unexpected and even inadvertent ways, and the program is hard to modify. The second version of the longest-line program is inferior to the first, partly for these reasons, and partly because it destroys the generality of two useful functions by writing into them the names of the variables they manipulate. 
At this point we have covered what might be called the conventional core of C. With this handful of building 
blocks, it's possible to write useful programs of considerable size, and it would probably be a good idea if you paused long enough to do so. These exercises suggest programs of somewhat greater complexity than the ones earlier in this chapter. 
Exercise 1-20. Write a program detab that replaces tabs in the input with the proper number of blanks to space to 
the next tab stop. Assume a fixed set of tab stops, say every n columns. Should n be a variable or a symbolic parameter? 
Exercise 1-21. Write a program entab that replaces strings of blanks by the minimum number of tabs and blanks 
to achieve the same spacing. Use the same tab stops as for detab. When either a tab or a single blank would 
suffice to reach a tab stop, which should be given preference? 
Exercise 1-22. Write a program to ``fold'' long input lines into two or more shorter lines after the last non-blank 
character that occurs before the n-th column of input. Make sure your program does something intelligent with very long lines, and if there are no blanks or tabs before the specified column. 
Exercise 1-23. Write a program to remove all comments from a C program. Don't forget to handle quoted strings 
and character constants properly. C comments don't nest. 
Exercise 1-24. Write a program to check a C program for rudimentary syntax errors like unmatched parentheses, 
brackets and braces. Don't forget about quotes, both single and double, escape sequences, and comments. (This program is hard if you do it in full generality.) 
Back to Introduction --  Index --  Chapter 2 
