Chapter 1 - A Tutorial Introduction
causes the values of the two integers fahr and celsius to be printed, with a tab (\t) between them. 
Each % construction in the first argument of printf is paired with the corresponding second argument, third argument, etc.; they must match up properly by number and type, or you will get wrong answers. 
By the way, printf is not part of the C language; there is no input or output defined in C itself. 
printf is just a useful function from the standard library of functions that are normally accessible to C programs. 
The behaviour of printf is defined in the ANSI standard, however, so its properties should be the same with any compiler and library that conforms to the standard. 
In order to concentrate on C itself, we don't talk much about input and output until chapter 7. 
In particular, we will defer formatted input until then. 
If you have to input numbers, read the discussion of the function scanf in Section 7.4. 
scanf is like printf, except that it reads input instead of writing output. 
There are a couple of problems with the temperature conversion program. 
The simpler one is that the output isn't very pretty because the numbers are not right-justified. 
That's easy to fix; if we augment each %d in the printf statement with a width, the numbers printed will be right-justified in their fields. 
For instance, we might say 
   printf("%3d %6d\n", fahr, celsius);
to print the first number of each line in a field three digits wide, and the second in a field six digits wide, like this: 
     0     -17
    20      -6    40       4    60      15    80      26   100      37   ...
The more serious problem is that because we have used integer arithmetic, the Celsius temperatures are not very accurate; for instance, 0 oF is actually about -17.8oC, not -17. 
To get more accurate answers, we should use floating-point arithmetic instead of integer. 
Here is the second version: 
