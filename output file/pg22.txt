Chapter 1 - A Tutorial Introduction
other , it a value its caller , which effect in the environment in which the program executed was is to return may .
Typically , zero of a return value normal termination implies ; non-zero values signal unusual or erroneous termination conditions . simplicity of the interests In , we return statements our main functions from this point to up omitted have , but we them hereafter , a reminder that programs status totheir environment return should as include will .
The declaration
int power -LRB- int base , int n -RRB- ;
just before main says that power a function is that two int arguments expects and an int returns .
This declaration , which a function prototype called is , power of the definition and uses with agree to has .
It an error is if a function or it of any uses of the definition its prototype with agree not do .
parameter names agree not need .
Indeed , parameter names , we written have could the prototype for so a function prototype in optional are
int power -LRB- int , int -RRB- ;
Well-chosen names good documentation however are , so we often them use will .
history : ANSI C and earlier versions between the biggest change of A note is how functions and defined declared are .
C of the original definition In , the power function this like written been have would :
The parameters the parentheses between named are , and their types the left brace opening before declared are ;
undeclared parameters int as . taken -LRB- the function of The body the same before as is . -RRB- are
the program of the beginning at power of The declaration this like looked have would :
int power -LRB- -RRB- ;
No parameter list permitted was , so the compiler readily check that power correctly called being was not could .
Indeed , since default power by an int return to assumed been have would , the entire declaration well have might
